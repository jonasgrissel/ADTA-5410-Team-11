# -*- coding: utf-8 -*-
"""Team 11 Weekly Challenge 4 StreamLit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NjrxYbtFQrgZUNBL58ybCJashCs067Yx
"""

# Commented out IPython magic to ensure Python compatibility.
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import numpy as np
import statsmodels.api as sm
import seaborn as sns
# %matplotlib inline

@st.cache_data
def load_and_clean_data(file_path):
    """
    Load and clean the dataset.

    Args:
        file_path (str): Path to the CSV file.

    Returns:
        pd.DataFrame: Cleaned DataFrame.
    """
    # Load dataset
    df = pd.read_csv(file_path)

    # List of date columns
    date_columns = ['ACTDATS', 'ANNDATS', 'REVDATS', 'FPEDATS', 'ANNDATS_ACT']

    for col in date_columns:
        try:
            # Convert to datetime
            df[col] = pd.to_datetime(df[col], errors='raise')  # Strict conversion
        except Exception as e:
            st.error(f"Error converting column {col}: {e}")
            raise

    return df

# Load and clean data
streamlit_df = load_and_clean_data('streamlit_df.csv')
if streamlit_df.empty:
    st.warning("The loaded DataFrame is empty!")
else:
    st.success("Data loaded successfully.")





# App Title and Description
st.title("EPS Data Analysis App")
st.write("Review trends and patterns in the EPS data ")

# Sidebar Filters
st.sidebar.header("Filter Options")

# Sidebar Filters for Numerical Variables
actual_range = st.sidebar.slider("ACTUAL", int(streamlit_df['ACTUAL'].min()),
int(streamlit_df['ACTUAL'].max()), (0, 6))
value_range = st.sidebar.slider("VALUE", int(streamlit_df['VALUE'].min()),
int(streamlit_df['VALUE'].max()), (0, 6))

# Sidebar Filters for Categorical Variables
fpi = st.sidebar.multiselect("FPI", options=streamlit_df['FPI'].unique(),
default=streamlit_df['FPI'].unique())
cname= st.sidebar.multiselect("CNAME", options=streamlit_df['CNAME'].unique(),
default=streamlit_df['CNAME'].unique())
#analyst= st.sidebar.multiselect("Analyst", options=streamlit_df['ANALYS'].unique(),
#default=streamlit_df['ANALYS'].unique())
#estimator= st.sidebar.multiselect("Estimator", options=streamlit_df['ESTIMATOR'].unique(),
#default=streamlit_df['ESTIMATOR'].unique())

# Sidebar date filter
st.sidebar.header("Filter by Date")

# Select the minimum and maximum dates available in the data
min_date = streamlit_df['ANNDATS_ACT'].min()
max_date = streamlit_df['ANNDATS_ACT'].max()

# Add a date range slider to the sidebar
start_date, end_date = st.sidebar.date_input(
    "Select Date Range",
    value=[min_date, max_date],
    min_value=min_date,
    max_value=max_date
)

# Filter data based on selections
filtered_data = streamlit_df[
(streamlit_df['FPI'].isin(fpi)) &
(streamlit_df['ACTUAL'].between(actual_range[0], actual_range[1])) &
(streamlit_df['VALUE'].between(value_range[0], value_range[1]))
]

# Show filtered data if user selects the option
if st.sidebar.checkbox("Show Filtered Data"):
  st.write(filtered_data)

## Add a histogram
# Section: Distribution of Actual EPS Values
st.header("Distribution of Actual EPS Values")
st.write("This histogram shows the distribution of actual EPS values in the filtered data.")
# Plot histogram
fig, ax = plt.subplots()
sns.histplot(filtered_data['ACTUAL'], bins=10, color='skyblue', kde=False, ax=ax)
ax.set_title("Histogram of Actual EPS Values")
ax.set_xlabel("EPS Values")
ax.set_ylabel("Frequency")
st.pyplot(fig)

# Adding a Scatter Plot
# Section: Scatter Plot: Actual vs Forecasted EPS Values
st.header("Scatter Plot: Actual vs Forecasted EPS Values")
st.write("Check the box below to add a trendline to the scatter plot.")
show_trendline = st.checkbox("Show Trendline", value=False)
fig = px.scatter(filtered_data, x='ACTUAL', y='VALUE', title="Actual vs Forecasted EPS Values",
labels={"ACTUAL": "Actual EPS", "VALUE": "Forecasted EPS"},
trendline="ols" if show_trendline else None)
st.plotly_chart(fig)

st.header("Correlation Matrix")
st.write("Check the box to view the correlation matrix for numerical variables.")
continuous_vars = ['ACTUAL','VALUE']
# Show correlation matrix
if st.checkbox("Show Correlation Matrix"):
  corr_matrix = filtered_data[continuous_vars].corr()
  fig, ax = plt.subplots(figsize=(8, 6))
  sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
  st.pyplot(fig)